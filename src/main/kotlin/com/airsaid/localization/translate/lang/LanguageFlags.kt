package com.airsaid.localization.translate.lang

import java.util.Locale

private val LANGUAGE_FLAG_OVERRIDES: Map<String, String> = mapOf(
    "sq" to "\uD83C\uDDE6\uD83C\uDDF1", // ðŸ‡¦ðŸ‡± Albania
    "ar" to "\uD83C\uDDF8\uD83C\uDDE6", // ðŸ‡¸ðŸ‡¦ Saudi Arabia
    "am" to "\uD83C\uDDEA\uD83C\uDDF9", // ðŸ‡ªðŸ‡¹ Ethiopia
    "az" to "\uD83C\uDDE6\uD83C\uDDFF", // ðŸ‡¦ðŸ‡¿ Azerbaijan
    "ga" to "\uD83C\uDDEE\uD83C\uDDEA", // ðŸ‡®ðŸ‡ª Ireland
    "et" to "\uD83C\uDDEA\uD83C\uDDEA", // ðŸ‡ªðŸ‡ª Estonia
    "eu" to "\uD83C\uDDEA\uD83C\uDDF8", // ðŸ‡ªðŸ‡¸ Spain (Basque Country)
    "be" to "\uD83C\uDDE7\uD83C\uDDFE", // ðŸ‡§ðŸ‡¾ Belarus
    "bg" to "\uD83C\uDDE7\uD83C\uDDEC", // ðŸ‡§ðŸ‡¬ Bulgaria
    "is" to "\uD83C\uDDEE\uD83C\uDDF8", // ðŸ‡®ðŸ‡¸ Iceland
    "pl" to "\uD83C\uDDF5\uD83C\uDDF1", // ðŸ‡µðŸ‡± Poland
    "bs" to "\uD83C\uDDE7\uD83C\uDDE6", // ðŸ‡§ðŸ‡¦ Bosnia and Herzegovina
    "fa" to "\uD83C\uDDEE\uD83C\uDDF7", // ðŸ‡®ðŸ‡· Iran
    "af" to "\uD83C\uDDFF\uD83C\uDDE6", // ðŸ‡¿ðŸ‡¦ South Africa
    "da" to "\uD83C\uDDE9\uD83C\uDDF0", // ðŸ‡©ðŸ‡° Denmark
    "de" to "\uD83C\uDDE9\uD83C\uDDEA", // ðŸ‡©ðŸ‡ª Germany
    "ru" to "\uD83C\uDDF7\uD83C\uDDFA", // ðŸ‡·ðŸ‡º Russia
    "fr" to "\uD83C\uDDEB\uD83C\uDDF7", // ðŸ‡«ðŸ‡· France
    "fil" to "\uD83C\uDDF5\uD83C\uDDED", // ðŸ‡µðŸ‡­ Philippines
    "fi" to "\uD83C\uDDEB\uD83C\uDDEE", // ðŸ‡«ðŸ‡® Finland
    "fy" to "\uD83C\uDDF3\uD83C\uDDF1", // ðŸ‡³ðŸ‡± Netherlands
    "km" to "\uD83C\uDDF0\uD83C\uDDED", // ðŸ‡°ðŸ‡­ Cambodia
    "ka" to "\uD83C\uDDEC\uD83C\uDDEA", // ðŸ‡¬ðŸ‡ª Georgia
    "gu" to "\uD83C\uDDEE\uD83C\uDDF3", // ðŸ‡®ðŸ‡³ India (Gujarati)
    "kk" to "\uD83C\uDDF0\uD83C\uDDFF", // ðŸ‡°ðŸ‡¿ Kazakhstan
    "ht" to "\uD83C\uDDED\uD83C\uDDF9", // ðŸ‡­ðŸ‡¹ Haiti
    "ko" to "\uD83C\uDDF0\uD83C\uDDF7", // ðŸ‡°ðŸ‡· South Korea
    "ha" to "\uD83C\uDDF3\uD83C\uDDEC", // ðŸ‡³ðŸ‡¬ Nigeria
    "nl" to "\uD83C\uDDF3\uD83C\uDDF1", // ðŸ‡³ðŸ‡± Netherlands
    "ky" to "\uD83C\uDDF0\uD83C\uDDEC", // ðŸ‡°ðŸ‡¬ Kyrgyzstan
    "gl" to "\uD83C\uDDEA\uD83C\uDDF8", // ðŸ‡ªðŸ‡¸ Spain (Galicia)
    "ca" to "\uD83C\uDDEA\uD83C\uDDF8", // ðŸ‡ªðŸ‡¸ Spain (Catalonia)
    "cs" to "\uD83C\uDDE8\uD83C\uDDFF", // ðŸ‡¨ðŸ‡¿ Czech Republic
    "kn" to "\uD83C\uDDEE\uD83C\uDDF3", // ðŸ‡®ðŸ‡³ India (Kannada)
    "co" to "\uD83C\uDDEB\uD83C\uDDF7", // ðŸ‡«ðŸ‡· France (Corsica)
    "hr" to "\uD83C\uDDED\uD83C\uDDF7", // ðŸ‡­ðŸ‡· Croatia
    "ku" to "\uD83C\uDDEE\uD83C\uDDEC", // ðŸ‡®ðŸ‡¶ Iraq (Kurdish)
    "la" to "\uD83C\uDDFB\uD83C\uDDE6", // ðŸ‡»ðŸ‡¦ Vatican City
    "lv" to "\uD83C\uDDF1\uD83C\uDDFB", // ðŸ‡±ðŸ‡» Latvia
    "lo" to "\uD83C\uDDF1\uD83C\uDDE6", // ðŸ‡±ðŸ‡¦ Laos
    "lt" to "\uD83C\uDDF1\uD83C\uDDF9", // ðŸ‡±ðŸ‡¹ Lithuania
    "lb" to "\uD83C\uDDF1\uD83C\uDDEA", // ðŸ‡±ðŸ‡º Luxembourg
    "ro" to "\uD83C\uDDF7\uD83C\uDDF4", // ðŸ‡·ðŸ‡´ Romania
    "mg" to "\uD83C\uDDF2\uD83C\uDDEC", // ðŸ‡²ðŸ‡¬ Madagascar
    "mt" to "\uD83C\uDDF2\uD83C\uDDF9", // ðŸ‡²ðŸ‡¹ Malta
    "mr" to "\uD83C\uDDEE\uD83C\uDDF3", // ðŸ‡®ðŸ‡³ India (Marathi)
    "ml" to "\uD83C\uDDEE\uD83C\uDDF3", // ðŸ‡®ðŸ‡³ India (Malayalam)
    "ms" to "\uD83C\uDDF2\uD83C\uDDFE", // ðŸ‡²ðŸ‡¾ Malaysia
    "mk" to "\uD83C\uDDF2\uD83C\uDDF0", // ðŸ‡²ðŸ‡° North Macedonia
    "mi" to "\uD83C\uDDF3\uD83C\uDDFF", // ðŸ‡³ðŸ‡¿ New Zealand (Maori)
    "mn" to "\uD83C\uDDF2\uD83C\uDDF3", // ðŸ‡²ðŸ‡³ Mongolia
    "bn" to "\uD83C\uDDFA\uD83C\uDDEC", // ðŸ‡§ðŸ‡© Bangladesh
    "my" to "\uD83C\uDDF2\uD83C\uDDF2", // ðŸ‡²ðŸ‡² Myanmar
    "hmn" to "\uD83C\uDDE8\uD83C\uDDF3", // ðŸ‡¨ðŸ‡³ China (Hmong)
    "xh" to "\uD83C\uDDFF\uD83C\uDDE6", // ðŸ‡¿ðŸ‡¦ South Africa
    "zu" to "\uD83C\uDDFF\uD83C\uDDE6", // ðŸ‡¿ðŸ‡¦ South Africa
    "ne" to "\uD83C\uDDF3\uD83C\uDDF5", // ðŸ‡³ðŸ‡µ Nepal
    "no" to "\uD83C\uDDF3\uD83C\uDDF4", // ðŸ‡³ðŸ‡´ Norway
    "pa" to "\uD83C\uDDEE\uD83C\uDDF3", // ðŸ‡®ðŸ‡³ India (Punjabi)
    "pt" to "\uD83C\uDDF5\uD83C\uDDF9", // ðŸ‡µðŸ‡¹ Portugal
    "ps" to "\uD83C\uDDE6\uD83C\uDDEB", // ðŸ‡¦ðŸ‡« Afghanistan
    "ny" to "\uD83C\uDDF2\uD83C\uDDFC", // ðŸ‡²ðŸ‡¼ Malawi
    "ja" to "\uD83C\uDDEF\uD83C\uDDF5", // ðŸ‡¯ðŸ‡µ Japan
    "sv" to "\uD83C\uDDF8\uD83C\uDDEA", // ðŸ‡¸ðŸ‡ª Sweden
    "sm" to "\uD83C\uDDFC\uD83C\uDDF8", // ðŸ‡¼ðŸ‡¸ Samoa
    "sr" to "\uD83C\uDDF7\uD83C\uDDF8", // ðŸ‡·ðŸ‡¸ Serbia
    "st" to "\uD83C\uDDF1\uD83C\uDDF8", // ðŸ‡±ðŸ‡¸ Lesotho
    "si" to "\uD83C\uDDF1\uD83C\uDDF0", // ðŸ‡±ðŸ‡° Sri Lanka
    "eo" to "\uD83C\uDDFA\uD83C\uDDF3", // ðŸ‡ºðŸ‡³ United Nations flag approximation
    "sk" to "\uD83C\uDDF8\uD83C\uDDF0", // ðŸ‡¸ðŸ‡° Slovakia
    "sl" to "\uD83C\uDDF8\uD83C\uDDEE", // ðŸ‡¸ðŸ‡® Slovenia
    "sw" to "\uD83C\uDDF9\uD83C\uDDF5", // ðŸ‡¹ðŸ‡¿ Tanzania
    "gd" to "\uD83C\uDDEC\uD83C\uDDE7", // ðŸ‡¬ðŸ‡§ United Kingdom (Scottish Gaelic)
    "ceb" to "\uD83C\uDDF5\uD83C\uDDED", // ðŸ‡µðŸ‡­ Philippines
    "so" to "\uD83C\uDDF8\uD83C\uDDF4", // ðŸ‡¸ðŸ‡´ Somalia
    "tg" to "\uD83C\uDDF9\uD83C\uDDEF", // ðŸ‡¹ðŸ‡¯ Tajikistan
    "te" to "\uD83C\uDDEE\uD83C\uDDF3", // ðŸ‡®ðŸ‡³ India (Telugu)
    "ta" to "\uD83C\uDDEE\uD83C\uDDF3", // ðŸ‡®ðŸ‡³ India (Tamil)
    "th" to "\uD83C\uDDF9\uD83C\uDDED", // ðŸ‡¹ðŸ‡­ Thailand
    "tr" to "\uD83C\uDDF9\uD83C\uDDF7", // ðŸ‡¹ðŸ‡· Turkey
    "cy" to "\uD83C\uDDEC\uD83C\uDDE7", // ðŸ‡¬ðŸ‡§ United Kingdom (Welsh)
    "ur" to "\uD83C\uDDF5\uD83C\uDDF0", // ðŸ‡µðŸ‡° Pakistan
    "uk" to "\uD83C\uDDFA\uD83C\uDDE6", // ðŸ‡ºðŸ‡¦ Ukraine
    "uz" to "\uD83C\uDDFA\uD83C\uDDFF", // ðŸ‡ºðŸ‡¿ Uzbekistan
    "es" to "\uD83C\uDDEA\uD83C\uDDF8", // ðŸ‡ªðŸ‡¸ Spain
    "iw" to "\uD83C\uDDEE\uD83C\uDDF1", // ðŸ‡®ðŸ‡± Israel
    "el" to "\uD83C\uDDEC\uD83C\uDDF7", // ðŸ‡¬ðŸ‡· Greece
    "haw" to "\uD83C\uDDFA\uD83C\uDDF8", // ðŸ‡ºðŸ‡¸ United States (Hawaii)
    "sd" to "\uD83C\uDDF5\uD83C\uDDF0", // ðŸ‡µðŸ‡° Pakistan (Sindhi)
    "hu" to "\uD83C\uDDED\uD83C\uDDFA", // ðŸ‡­ðŸ‡º Hungary
    "sn" to "\uD83C\uDDFF\uD83C\uDDFC", // ðŸ‡¿ðŸ‡¼ Zimbabwe
    "hy" to "\uD83C\uDDE6\uD83C\uDDF2", // ðŸ‡¦ðŸ‡² Armenia
    "ig" to "\uD83C\uDDF3\uD83C\uDDEC", // ðŸ‡³ðŸ‡¬ Nigeria
    "it" to "\uD83C\uDDEE\uD83C\uDDF9", // ðŸ‡®ðŸ‡¹ Italy
    "yi" to "\uD83C\uDDEE\uD83C\uDDF1", // ðŸ‡®ðŸ‡± Israel
    "hi" to "\uD83C\uDDEE\uD83C\uDDF3", // ðŸ‡®ðŸ‡³ India
    "su" to "\uD83C\uDDEE\uD83C\uDDE9", // ðŸ‡®ðŸ‡© Indonesia
    "jv" to "\uD83C\uDDEE\uD83C\uDDE9", // ðŸ‡®ðŸ‡© Indonesia
    "en" to "\uD83C\uDDFA\uD83C\uDDF8", // ðŸ‡ºðŸ‡¸ United States
    "yo" to "\uD83C\uDDF3\uD83C\uDDEC", // ðŸ‡³ðŸ‡¬ Nigeria
    "vi" to "\uD83C\uDDFB\uD83C\uDDF3", // ðŸ‡»ðŸ‡³ Vietnam
    "as" to "\uD83C\uDDEE\uD83C\uDDF3", // ðŸ‡®ðŸ‡³ India (Assamese)
    "prs" to "\uD83C\uDDE6\uD83C\uDDEB", // ðŸ‡¦ðŸ‡« Afghanistan (Dari)
    "fj" to "\uD83C\uDDEB\uD83C\uDDEF", // ðŸ‡«ðŸ‡¯ Fiji
    "mww" to "\uD83C\uDDE8\uD83C\uDDF3", // ðŸ‡¨ðŸ‡³ China (Hmong Daw)
    "iu" to "\uD83C\uDDE8\uD83C\uDDE6", // ðŸ‡¨ðŸ‡¦ Canada (Inuktitut)
    "or" to "\uD83C\uDDEE\uD83C\uDDF3", // ðŸ‡®ðŸ‡³ India (Odia)
    "otq" to "\uD83C\uDDF2\uD83C\uDDFD", // ðŸ‡²ðŸ‡½ Mexico (QuerÃ©taro Otomi)
    "ty" to "\uD83C\uDDF5\uD83C\uDDEB", // ðŸ‡µðŸ‡« French Polynesia (Tahitian)
    "ti" to "\uD83C\uDDEA\uD83C\uDDF7", // ðŸ‡ªðŸ‡· Eritrea (Tigrinya)
    "to" to "\uD83C\uDDF9\uD83C\uDDF4", // ðŸ‡¹ðŸ‡´ Tonga
    "yua" to "\uD83C\uDDF2\uD83C\uDDFD" // ðŸ‡²ðŸ‡½ Mexico (Yucatec Maya)
)

private val REGION_CODE_PATTERN = Regex("(?:-|_)(?:r)?([A-Za-z]{2})$")

val Lang.flagEmoji: String?
    get() {
        extractRegion(code)?.let { region ->
            regionToFlag(region)?.let { return it }
        }

        val translation = translationCode
        extractRegion(translation)?.let { region ->
            regionToFlag(region)?.let { return it }
        }

        val normalizedCode = code.lowercase(Locale.US)
        LANGUAGE_FLAG_OVERRIDES[normalizedCode]?.let { return it }

        val normalizedTranslation = translation.lowercase(Locale.US)
        LANGUAGE_FLAG_OVERRIDES[normalizedTranslation]?.let { return it }

        return null
    }

private fun extractRegion(value: String?): String? {
    if (value.isNullOrBlank()) return null
    val match = REGION_CODE_PATTERN.find(value)
    return match?.groupValues?.getOrNull(1)?.uppercase(Locale.US)
}

private fun regionToFlag(region: String): String? {
    val code = region.uppercase(Locale.US)
    if (code.length != 2 || code.any { it !in 'A'..'Z' }) return null
    return buildString {
        append(Character.toChars(0x1F1E6 + (code[0].code - 'A'.code)))
        append(Character.toChars(0x1F1E6 + (code[1].code - 'A'.code)))
    }
}
